{"version":3,"sources":["components/Nav.js","Context/Context.js","components/Movie.js","components/Movies.js","components/Form.js","components/Poster.js","components/Details.js","components/MovieDetails.js","App.js","serviceWorker.js","index.js"],"names":["Nav","toggleNav","navbar","refs","className","class","id","ref","to","href","onClick","this","React","Component","Context","createContext","Provider","children","useState","input","setInput","movie","setMovie","loading","setLoading","useEffect","a","fetch","data","json","fetchMovie","value","getMovieName","movieName","encodeURI","Movie","props","Grid","Column","imdbID","Card","Image","src","Poster","wrapped","ui","Content","Header","Title","extra","Icon","name","Year","Movies","context","useContext","style","position","top","left","transform","Dimmer","active","inverted","Loader","stackable","columns","Search","map","key","Form","Error","Message","negative","margin","as","textAlign","color","onSubmit","e","preventDefault","Input","fluid","icon","placeholder","onChange","target","Response","Placeholder","height","width","Details","Actors","Director","Awards","Genre","Language","Released","Writer","imdbRating","Paragraph","Line","MovieDetails","URL","console","log","match","params","movieID","Button","animated","marginTop","primary","visible","hidden","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fda79031.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Nav extends React.Component {\n  toggleNav = () => {\n    const navbar = this.refs.navbar;\n    if (navbar.className === \"topnav\") {\n      navbar.className += \" responsive\";\n    } else {\n      navbar.className = \"topnav\";\n    }\n  };\n\n  render() {\n    return (\n      <nav>\n        <div class=\"topnav\" id=\"myTopnav\" ref=\"navbar\">\n          <Link to=\"/\">\n            <a href=\"#!\" className=\"logo\">\n              MovieHUB\n            </a>\n          </Link>\n          <a href=\"#!\">Home</a>\n          <a href=\"#!\">API</a>\n          <a href=\"#!\">GitHUb</a>\n          <a href=\"#!\" class=\"icon\" onClick={this.toggleNav}>\n            <i class=\"fa fa-bars\"></i>\n          </a>\n        </div>\n      </nav>\n    );\n  }\n}\n","import React, { createContext, useEffect, useState } from \"react\";\n\nexport const Context = createContext({});\n\nexport default function Provider({ children }) {\n  const [input, setInput] = useState(\"\");\n  const [movie, setMovie] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      setLoading(true);\n\n      const data = await fetch(\n        `http://www.omdbapi.com/?s=${input}&apikey=2df6ffde`\n      );\n\n      const json = await data.json();\n\n      setMovie(json);\n      setLoading(false);\n    };\n\n    fetchMovie();\n  }, [input]);\n\n  const getMovieName = (movieName) => {\n    setInput(encodeURI(movieName));\n  };\n\n  return (\n    <Context.Provider\n      value={{ movie: movie, getMovieName: getMovieName, loading: loading }}\n    >\n      {children}\n    </Context.Provider>\n  );\n}\n","import React from \"react\";\nimport { Grid, Icon, Card, Image } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Movie(props) {\n  return (\n    <Grid.Column>\n      <Link to={`/movies/${props.movie.imdbID}`}>\n        <Card>\n          <Image src={props.movie.Poster} wrapped ui={false} />\n          <Card.Content>\n            <Card.Header>{props.movie.Title}</Card.Header>\n          </Card.Content>\n          <Card.Content extra>\n            <Icon name=\"calendar\" />\n            {props.movie.Year}\n          </Card.Content>\n        </Card>\n      </Link>\n    </Grid.Column>\n  );\n}\n\nexport default Movie;\n","import React, { useContext } from \"react\";\nimport { Context } from \"../Context/Context\";\nimport Movie from \"./Movie\";\nimport { Loader, Dimmer, Grid } from \"semantic-ui-react\";\n\nexport default function Movies() {\n  const context = useContext(Context);\n\n  const verticalMiddle = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  };\n\n  if (context.loading) {\n    return (\n      <div style={verticalMiddle}>\n        <Dimmer active inverted>\n          <Loader>Loading</Loader>\n        </Dimmer>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Grid stackable columns={3}>\n        {context.movie.Search &&\n          context.movie.Search.map((movie) => (\n            <Movie movie={movie} key={movie.imdbID} />\n          ))}\n      </Grid>\n    </>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { Header as HD, Input, Message } from \"semantic-ui-react\";\nimport { Context } from \"../Context/Context\";\n\nfunction Form() {\n  const [movie, setMovie] = useState(\"\");\n  const context = useContext(Context);\n\n  function Error() {\n    return (\n      <Message negative style={{ margin: \"2rem 0\" }}>\n        <Message.Header>Sorry....No Movie found!</Message.Header>\n        <p>Try again with another Movie name!</p>\n      </Message>\n    );\n  }\n\n  function handleFormSubmit(e) {\n    e.preventDefault();\n\n    context.getMovieName(movie);\n  }\n\n  return (\n    <header>\n      <HD as=\"h1\" textAlign=\"center\" color=\"blue\">\n        Search for a Movie!\n      </HD>\n      <form onSubmit={handleFormSubmit}>\n        <Input\n          fluid\n          icon=\"search\"\n          placeholder=\"Search...\"\n          onChange={(e) => setMovie(e.target.value)}\n        />\n      </form>\n      {context.movie.Response === \"False\" && <Error />}\n    </header>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\nimport { Placeholder, Image } from \"semantic-ui-react\";\n\nexport default function Poster(props) {\n  if (!props.movie.Poster) {\n    return (\n      <Placeholder style={{ height: \"100%\", width: \"100%\" }}>\n        <Placeholder.Image />\n      </Placeholder>\n    );\n  }\n\n  return <Image src={props.movie.Poster} fluid />;\n}\n","import React from \"react\";\nimport { Placeholder, Header } from \"semantic-ui-react\";\n\nexport default function Details(props) {\n  if (!props.movie.Poster) {\n    return (\n      <Placeholder>\n        <Placeholder.Paragraph>\n          <Placeholder.Line />\n          <Placeholder.Line />\n          <Placeholder.Line />\n          <Placeholder.Line />\n          <Placeholder.Line />\n        </Placeholder.Paragraph>\n        <Placeholder.Paragraph>\n          <Placeholder.Line />\n          <Placeholder.Line />\n          <Placeholder.Line />\n        </Placeholder.Paragraph>\n      </Placeholder>\n    );\n  }\n\n  return (\n    <>\n      <Header as=\"h1\">{props.movie.Title}</Header>\n      <Header as=\"h5\">Actors: {props.movie.Actors}</Header>\n      <Header as=\"h5\">Director: {props.movie.Director}</Header>\n      <Header as=\"h5\">Awards: {props.movie.Awards}</Header>\n      <Header as=\"h5\">Genre: {props.movie.Genre}</Header>\n      <Header as=\"h5\">Languages: {props.movie.Language}</Header>\n      <Header as=\"h5\">Released: {props.movie.Released}</Header>\n      <Header as=\"h5\">Writer: {props.movie.Writer}</Header>\n      <Header as=\"h5\">Imdb Rating: {props.movie.imdbRating}</Header>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Icon, Grid } from \"semantic-ui-react\";\nimport Poster from \"./Poster\";\nimport Details from \"./Details\";\nimport { Link } from \"react-router-dom\";\n\nfunction MovieDetails(props) {\n  const [movie, setMovie] = useState({});\n\n  useEffect(() => {\n    const fetchMovie = async (URL) => {\n      try {\n        const data = await fetch(URL);\n        const json = await data.json();\n\n        setMovie(json);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    fetchMovie(\n      `http://www.omdbapi.com/?i=${props.match.params.movieID}&apikey=2df6ffde`\n    );\n  });\n  console.log(movie);\n\n  return (\n    <>\n      <Link to=\"/\">\n        <Button animated style={{ marginTop: \"1rem\" }} primary>\n          <Button.Content visible>Back</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"arrow left\" />\n          </Button.Content>\n        </Button>\n      </Link>\n      <Grid stackable columns={2} style={{ marginTop: \"2rem\" }}>\n        <Grid.Column>\n          <Poster movie={movie} />\n        </Grid.Column>\n        <Grid.Column>\n          <Details movie={movie} />\n        </Grid.Column>\n      </Grid>\n    </>\n  );\n}\n\nexport default MovieDetails;\n","import React from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./App.css\";\n\n// import components\nimport Nav from \"./components/Nav\";\nimport Provider from \"./Context/Context\";\nimport Movies from \"./components/Movies\";\nimport Form from \"./components/Form\";\nimport MovieDetails from \"./components/MovieDetails\";\n// import react router\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Provider>\n      <Nav />\n      <div className=\"container\">\n        <Form />\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/\" component={Movies} exact />\n            <Route path=\"/movies/:movieID\" component={MovieDetails} exact />\n          </Switch>\n        </BrowserRouter>\n      </div>\n    </Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}